#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 19 12:45:37 2023

@author: amberwaymouth
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter
import math 

carrier_frequency = 300 
message_frequency = 10  
mod_index = 1
duration = 1.0  
sampling_rate = 1000  
snr_db = 30
cutoff_freq = 15

def am_signal_generator(carrier_frequency, mod_index, 
                       message_frequency, duration, sampling_rate, snr_db):
    t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)
    carrier_signal = np.cos(2 * np.pi * carrier_frequency * t)
    m_t = np.sin(2 * np.pi * message_frequency * t)
    am_signal = (1 + mod_index * m_t) * carrier_signal
    
    snr_linear = 10 ** (snr_db / 10) # convert to linear 
    noise_std = np.sqrt(np.var(am_signal) / (2 * snr_linear)) # variance represents signal power, adjusts noise power relative to signal power, then calculate standard deviation
    gaussian_noise = np.random.normal(0, noise_std, len(t))
    sr_t = am_signal + gaussian_noise
    
    return t, carrier_signal, m_t, sr_t

def detect_envelope(signal): 
    envelope = np.abs(signal)
    return envelope 

def low_pass_filter(signal, sampling_rate, cutoff_freq):
    nyquist_freq = 1/2 * sampling_rate
    normal_cutoff = cutoff_freq / nyquist_freq
    b, a = butter(1, normal_cutoff, btype='low', analog=False)
    filtered_signal = lfilter(b, a, signal)
    return filtered_signal


t, carrier_signal, m_t, sr_t = am_signal_generator(
    carrier_frequency, mod_index, message_frequency, 
    duration, sampling_rate, snr_db)

envelope = detect_envelope(sr_t)

filtered_envelope = 2 * low_pass_filter(envelope, sampling_rate, cutoff_freq) - 1

plt.figure(figsize=(10, 8))
plt.subplot(4, 1, 1)
plt.plot(t, carrier_signal, label='Carrier Signal')
plt.title('Carrier Signal')
plt.subplot(4, 1, 2)
plt.plot(t, m_t, label='Message Signal')
plt.title('Message Signal')
plt.subplot(4, 1, 3)
plt.plot(t, sr_t, label='Received Signal (with Gaussian noise)')
plt.title('Received Signal (with Gaussian Noise)')
plt.subplot(4, 1, 4)
plt.plot(t, filtered_envelope, label='Filtered Envelope Signal')
plt.title('Filtered Envelope Signal')
plt.xlabel('Time (s)')
plt.tight_layout()
plt.show()

